INSTALL: Git installation
apt-get install git


STEP 1: Configuration of git on the pc (configs the user for that repo)
git config --global user.name "Username of github or bitbucket"
git config --global user.email "Email of github or bitbucket"

The above data are listed in .gitconfig which is located at the
home directory i.e. home/mike. They can be seen on terminal using:
git config --list


STEP 2: Cloning the git repo from the web repo
Change into the git directory and create a new folder i.e. mkdir git_test
Go to the repository on bitbucket or github and push the clone button. Copy
the git clone statement.

git clone https://michailtam@bitbucket.org/michailtam/facial-expression-recognition-using-deep-learning.git

Another option is to create a folder where the project will live and initialize it as a git repo:
git init


STEP 4: Git status
Check your git status with git status. This should be the output:

On branch master
Your branch is up to date with 'origin/master'.
<and a list of files to commit>


STEP 5: Add files for commiting
git add <file>
or
git add .    // this will upload all the files except them of .gitignore


STEP 6: Commit 
git commit -m "<comment>"

NOTE:	The files are still not on the web repo. To achieve that you have to push the files:
		git push -u origin master

PULL A SPECIFIC COMMIT FROM REPO
1. git log -> choose the desired commit (has string example: 3e938848ecccd39c84e842ef657127ab4fbdf071 or online) 
2.a List the last commit git log-remote <path to url>
2.b copy the hash SHA-1 string from the commits url of online repo
3. git fetch origin <SHA-1>   if an error occurs related to uncommited changes, then you
   go to section DROP COMMIT (BEFORE GIT PUSH)
4. git checkout FETCH_HEAD 

PULL A SPECIFIC COMMIT OF BRANCH FROM REPO
1. git clone <remote url> -b <branch name>
2. cd <repo name>
3. git checkout <COMMIT HASH e.g. f7255cf2cc6b5116e50840816d70d21e7cc039bb>
IMPORTANT: avoid using reset

DROP COMMIT (BEFORE GIT PUSH)
1. git stash save --keep-index
2. git stash drop -> if the files are not needed anymore

TO Get the stashed files: git stash pop OR by index git stash apply --index

ANOTHER WAY TO STASH (IMPORTANT: Carries over from branch to branch)
git stash save "message"
git stash list // lists all stashed contents
git stash pop // pops the first position (stack)
git stash drop stash@{1} // drops the stash of the index 1
git stash clear // removes all stashes (BE CAREFUL)


OPERATIONS

1. git log		->		shows the history of the commits (example: git log -2 shows only the last two)
2. git push		->		pushes files to GitHub (example: git push -u origin master 
						which is the name of the remote i.e. GitHub)
3. git pull		->		pulls files from GitHub (example: git pull origin master)
4. git remote 	->		git remote -v (shows the remote url)
5. git status	->		shows the status of the git repo (if it exists)
6. git commit 	->		commits files to the staging area (example: git commit -a adds all files to the
						staging area, git commit -a -m adds them with a message)
7. git add 		->		adds specific files to the staging area (example: git add . adds all files)
8. git remote	->		adds the remote place. This is needed if we have not created the git repo online,
						but worked localy with git init	(example: git remote add origin <url of git repo>)


Untrack added files to .gitignore which are still shown:
1. Commit any outstanding code changes
2. git rm -r --cached .
3. git add .
4. git commit -am ".gitignore is now working"


REVERT CHANGES TO MODIFIED FILES
git reset --hard

REMOVES ALL UNTRACKED FILES AND DIRECTORIES. (`-f` is `force`, `-d` is `remove directories`)
git clean -fd

Push an existing local repo to the remote repo
...Before init repo etc.
1. git remote add origin https://github.com/michailtam/project_name.git
2. git push -u origin master

Example:
git remote add origin https://michailtam@bitbucket.org/michailtam/custom-python-libs.git
git push -u origin master


UPDATE REMOTE URL
git remote set-url origin <new remote url>

GET HELP
git help operation -> Example: git help ignore

UNDO ADDED FILES
git reset or for specific files
git reset <file_name>

FIX A DETACHED HEAD
Step 1. Create a branch of <name> by typing: git branch <name>
Step 2. Switch over to your new branch by checking it out: git checkout <name>
Step 3. Point the master pointer to the <name> branch pointer (the-f means force): git branch -f master <name>
Step 4. Switch to the master branch git checkout master
Step 5. Now delete <name> branch: git branch -d <name>
Step 6. Push the new changes to the remote repository: git push origin master