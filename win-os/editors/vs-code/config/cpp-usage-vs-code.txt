COMPILE AND EXECUTE C/C++ CODE IN WINDOWS USING VS CODE (ONE OR MULTIPLE FILES)

// GENERAL SETUP
SOURCE: https://www.youtube.com/watch?v=DIw02CaEusY&t=1230s

1. Install VS Code
2.1. Set the workspace directory in the settings of vs-code (Ctrl-Shift-P -> settings 
-> Open Workspace Settings (JSON) -> example: "path": "C://Projects//hello-world")
2.2. Install MinGW
2.3 Set C:\MinGW\bin in the environment variables of windows
3. Add C/C++ extension in VS Code
4. Create a main.cpp in the project folder
5. Create or edit (dependent on the error message) an include path: c_cpp_properties.json,
which will contain all the settings of the C/C++ compilation properties.
NOTE: In addition a .vscode folder gets created which will contain the overall execution settings.

5.1 In c_cpp_properties.json add the C++ include path as follows:
"browse": {
            "path": [
                "${workspaceFolder}",
                "C:\\MinGW\\lib\\gcc\\mingw32\\9.2.0\\include\\c++"
            ]   
        }

6. Add a tasks.json file as follows: Ctrl-Shift-P
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			"label": "echo",
			"command": "g++",
			"args": [
				"-g",
				"${file}",
				"-o",
				"${fileDirname}\\${fileBasenameNoExtension}.exe"
			],
			"options": {
				"cwd": "${workspaceFolder}"
			},
			"problemMatcher": [
				"$gcc"
			],
			"group": {
				"kind": "build",
				"isDefault": true
			}
		}
	]
}

7. Compile the code with Ctrl-Shift-B which creates an .exe file
8. Run the program like .\main.exe

// ADDING DEBUG CAPABILITY
9. Click on the debug icon on the left, choose C++ (GDB/LLDB) and create a launch.json file
NOTE: If there is no gdb.exe in C:\\MinGW\bin then run the following in the command line prompt:
mingw-get.exe install gdb

10. Paste in miDebuggerPath the following:
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "(gdb) Launch",
            "type": "cppdbg",
            "request": "launch",
            "program": "${workspaceFolder}/main.exe",
            "args": [],
            "stopAtEntry": false,
            "cwd": "${workspaceFolder}",
            "environment": [],
            "externalConsole": false,
            "MIMode": "gdb",
            "miDebuggerPath": "C:\\MinGW\\bin\\gdb.exe",
            "preLaunchTask": "echo", // Builds the code first and starts then the debugging process
            "setupCommands": [
                {
                    "description": "Enable pretty-printing for gdb",
                    "text": "-enable-pretty-printing",
                    "ignoreFailures": true
                }
            ]
        }
    ]
}

11. Start the debug process by pressing the run button (triangle symbol)

NOTE: The above steps are only applicable to one cpp file. If you want to compile a project
consisting of multiple .cpp and .h files than follow the upcoming steps.

// MULTIPLE FILE COMPILATION
SOURCE: https://dev.    to/talhabalaj/setup-visual-studio-code-for-multi-file-c-projects-1jpi

12. Create the following folders in the project folder:
12.1 include
12.2 src
12.3 lib
12.4 bin

13. Create a makefile in the root project directory with the following content:
CXX       := g++
CXX_FLAGS := -std=c++17 -ggdb

BIN     := bin
SRC     := src
INCLUDE := include

LIBRARIES   :=
EXECUTABLE  := main


all: $(BIN)/$(EXECUTABLE)

run: clean all
    clear
    ./$(BIN)/$(EXECUTABLE)

$(BIN)/$(EXECUTABLE): $(SRC)/*.cpp
    $(CXX) $(CXX_FLAGS) -I$(INCLUDE) $^ -o $@ $(LIBRARIES)

clean:
    -rm $(BIN)/*

14. Hit F5 to start the debug process

15. READY
